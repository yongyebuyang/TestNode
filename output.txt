冲区解读

我们主要聊聊以下几个方面的问题：

什么是缓冲区，用来做啥

如何创建缓冲区

访问缓冲区

设置某个字节的数据

切分缓冲区

复制缓冲区

编码和解码二进制数据

好,看起来内容有点多，其实很简单，我们切入正题

缓冲区的概念

我们都知道JS非常的善于处理字符串，因此它并不善于处理二进制的数据。在js中没有字节类型，也没有结构类型，也没有字节数组类型，只有数值类型和字符串类型。

在服务器端，JS可以很容易处理http这样的文本协议，但是我们知道服务端不仅做这些，可能会有数据库通信，操作图像，文件上传。所以JS操作起来不是那么的容易，浪费资源，有很缓慢。因此Buffer就出现了，它作为node的一个核心模块，专门来处理二进制数据。

要了解的buffer特点

Buffer伪类的数据占用并不是分配在JS的VM内存堆中，也就是说Buffer对象不会被JS的垃圾收集算法处理，它占据的是一个不会被修改的永久内存地址，这也避免了因缓冲区内容的内存复制而导致的CPU浪费。

创建缓冲区

缓冲区的创建方法很简单，我们看一个例子：

//1. utf-8 constbuf =newBuffer('hello world');//默认的编码方式//2.指定编码方式constbuf1 =newBuffer('8b76fde713ce','base64');//3.创建指定长度的缓冲区constbuf2 =newBuffer(1024);//创建1024字节的缓冲区console.log(buf);//

访问缓冲区和相关操作

//访问缓冲区console.log(buf[2]);//buf 上第2个字节->108//初始化缓冲区中的数据并非0 而是一些随机值 (书上)console.log(buf2[1]);//自己亲测的时候是0 可能是我node版本的原因//设置某个字节上的数据buf2[1] =125;console.log(buf2[1]);// 125//获取长度console.log(buf.length);// 11//轶代缓冲区内容constbuf3 =newBuffer(100);for(vari =0;i

切分缓冲区

//切分缓冲区constbuf4 =newBuffer('nihao node js');constsmallerBuf = buf4.slice(8,12);console.log(smallerBuf.toString());//de j